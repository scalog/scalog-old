syntax = "proto3";

package messaging;

/*
The file defines messages that any Server can receive
from another machine (inclusive of clients and ordering)

Each machine will talk to each other by using a socket
based network connection. We will serialize these 
messages and send them on this wire. 
*/

service Data {
	rpc Append (AppendRequest) returns (AppendResponse) {}

	rpc Replicate (stream ReplicateRequest) returns (ReplicateResponse) {}

	rpc Commit (stream CommitRequest) returns (CommitResponse) {}

	rpc Subscribe (SubscribeRequest) returns (stream SubscribeResponse) {}

	rpc Trim (TrimRequest) returns (TrimResponse) {}
}

message AppendRequest {
	int32 cid = 1;
	int32 csn = 2;
	string record = 3;
}

message AppendResponse {
	int32 csn = 1;
	int32 gsn = 2;
}

message ReplicateRequest {
	int32 serverID = 1;
	string record = 2;
}

// No response needed. In event of failure, we should finalize everything
// anyways
message ReplicateResponse {}

message CommitRequest {
	// Integer offset of the first newly ordered record
	int32 offset = 1;
	// Should be in order of the server ID
	repeated int32 cut = 2;
}

message CommitResponse {}

message SubscribeRequest {
	int32 subscription_gsn = 1;
}

message SubscribeResponse {
	int32 gsn = 1;
	string record = 2;
}

message TrimRequest {
	int32 gsn = 1;
}

message TrimResponse {}

// message Server {
// 	string sender_name = 1;			// Server name of sender
// 	int32 sender_replica_id = 2;	// Server ID of sender
//   	int32 sender_shard_id = 3;		// Sender's shard ID
//   	int32 client_id = 4;			// Client ID
//   	int32 client_seq_num = 5;		// Client generated record sequence num
//   	string record = 6;				// Entry to log
//   	int32 global_sequence_number =  7;	// Utilized in subscribe and trim.
//   	repeated int32 cut = 8;			// Received from ordering, this is a global cut vector
//   	int32 global_ordering_threshold = 9;	

// 	enum RequestType {
// 		APPEND = 0;	// Sent from a client, add this to log
// 		REPLICATE = 1;	// Sent from a server, duplicate this obj. We want to carry over the csn and the cid to avoid duplicates
// 		COMMIT = 2;	// Sent from ordering
// 		SUBSCRIBE = 3;	// Sent from client
// 		TRIM = 4;	// Sent from client. Ignore implementation for now
// 	}

// 	RequestType request_type = 10;
// }
