// Code generated by protoc-gen-go.
// source: datapb/data.proto
// DO NOT EDIT!

/*
Package datapb is a generated protocol buffer package.

It is generated from these files:
	datapb/data.proto

It has these top-level messages:
	AppendRequest
	AppendResponse
	ReplicateRequest
	ReplicateResponse
	SubscribeRequest
	SubscribeResponse
	TrimRequest
	TrimResponse
	ReadRequest
	ReadResponse
*/
package datapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppendRequest struct {
	Cid    int32  `protobuf:"varint,1,opt,name=cid" json:"cid,omitempty"`
	Csn    int32  `protobuf:"varint,2,opt,name=csn" json:"csn,omitempty"`
	Record string `protobuf:"bytes,3,opt,name=record" json:"record,omitempty"`
}

func (m *AppendRequest) Reset()                    { *m = AppendRequest{} }
func (m *AppendRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()               {}
func (*AppendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppendRequest) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *AppendRequest) GetCsn() int32 {
	if m != nil {
		return m.Csn
	}
	return 0
}

func (m *AppendRequest) GetRecord() string {
	if m != nil {
		return m.Record
	}
	return ""
}

type AppendResponse struct {
	Csn    int32 `protobuf:"varint,1,opt,name=csn" json:"csn,omitempty"`
	Gsn    int32 `protobuf:"varint,2,opt,name=gsn" json:"gsn,omitempty"`
	ViewID int32 `protobuf:"varint,3,opt,name=viewID" json:"viewID,omitempty"`
}

func (m *AppendResponse) Reset()                    { *m = AppendResponse{} }
func (m *AppendResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendResponse) ProtoMessage()               {}
func (*AppendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppendResponse) GetCsn() int32 {
	if m != nil {
		return m.Csn
	}
	return 0
}

func (m *AppendResponse) GetGsn() int32 {
	if m != nil {
		return m.Gsn
	}
	return 0
}

func (m *AppendResponse) GetViewID() int32 {
	if m != nil {
		return m.ViewID
	}
	return 0
}

type ReplicateRequest struct {
	ServerID int32  `protobuf:"varint,1,opt,name=serverID" json:"serverID,omitempty"`
	Record   string `protobuf:"bytes,2,opt,name=record" json:"record,omitempty"`
}

func (m *ReplicateRequest) Reset()                    { *m = ReplicateRequest{} }
func (m *ReplicateRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplicateRequest) ProtoMessage()               {}
func (*ReplicateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReplicateRequest) GetServerID() int32 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

func (m *ReplicateRequest) GetRecord() string {
	if m != nil {
		return m.Record
	}
	return ""
}

// No response needed. In event of failure, we should finalize everything
type ReplicateResponse struct {
}

func (m *ReplicateResponse) Reset()                    { *m = ReplicateResponse{} }
func (m *ReplicateResponse) String() string            { return proto.CompactTextString(m) }
func (*ReplicateResponse) ProtoMessage()               {}
func (*ReplicateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SubscribeRequest struct {
	SubscriptionGsn int32 `protobuf:"varint,1,opt,name=subscription_gsn,json=subscriptionGsn" json:"subscription_gsn,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SubscribeRequest) GetSubscriptionGsn() int32 {
	if m != nil {
		return m.SubscriptionGsn
	}
	return 0
}

type SubscribeResponse struct {
	Gsn    int32  `protobuf:"varint,1,opt,name=gsn" json:"gsn,omitempty"`
	Record string `protobuf:"bytes,2,opt,name=record" json:"record,omitempty"`
	ViewID int32  `protobuf:"varint,3,opt,name=viewID" json:"viewID,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SubscribeResponse) GetGsn() int32 {
	if m != nil {
		return m.Gsn
	}
	return 0
}

func (m *SubscribeResponse) GetRecord() string {
	if m != nil {
		return m.Record
	}
	return ""
}

func (m *SubscribeResponse) GetViewID() int32 {
	if m != nil {
		return m.ViewID
	}
	return 0
}

type TrimRequest struct {
	Gsn int32 `protobuf:"varint,1,opt,name=gsn" json:"gsn,omitempty"`
}

func (m *TrimRequest) Reset()                    { *m = TrimRequest{} }
func (m *TrimRequest) String() string            { return proto.CompactTextString(m) }
func (*TrimRequest) ProtoMessage()               {}
func (*TrimRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TrimRequest) GetGsn() int32 {
	if m != nil {
		return m.Gsn
	}
	return 0
}

type TrimResponse struct {
	ViewID int32 `protobuf:"varint,1,opt,name=viewID" json:"viewID,omitempty"`
}

func (m *TrimResponse) Reset()                    { *m = TrimResponse{} }
func (m *TrimResponse) String() string            { return proto.CompactTextString(m) }
func (*TrimResponse) ProtoMessage()               {}
func (*TrimResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TrimResponse) GetViewID() int32 {
	if m != nil {
		return m.ViewID
	}
	return 0
}

type ReadRequest struct {
	Gsn int32 `protobuf:"varint,1,opt,name=gsn" json:"gsn,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReadRequest) GetGsn() int32 {
	if m != nil {
		return m.Gsn
	}
	return 0
}

type ReadResponse struct {
	Record string `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
	ViewID int32  `protobuf:"varint,2,opt,name=viewID" json:"viewID,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReadResponse) GetRecord() string {
	if m != nil {
		return m.Record
	}
	return ""
}

func (m *ReadResponse) GetViewID() int32 {
	if m != nil {
		return m.ViewID
	}
	return 0
}

func init() {
	proto.RegisterType((*AppendRequest)(nil), "datapb.AppendRequest")
	proto.RegisterType((*AppendResponse)(nil), "datapb.AppendResponse")
	proto.RegisterType((*ReplicateRequest)(nil), "datapb.ReplicateRequest")
	proto.RegisterType((*ReplicateResponse)(nil), "datapb.ReplicateResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "datapb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "datapb.SubscribeResponse")
	proto.RegisterType((*TrimRequest)(nil), "datapb.TrimRequest")
	proto.RegisterType((*TrimResponse)(nil), "datapb.TrimResponse")
	proto.RegisterType((*ReadRequest)(nil), "datapb.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "datapb.ReadResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Data service

type DataClient interface {
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	Replicate(ctx context.Context, opts ...grpc.CallOption) (Data_ReplicateClient, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Data_SubscribeClient, error)
	Trim(ctx context.Context, in *TrimRequest, opts ...grpc.CallOption) (*TrimResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := grpc.Invoke(ctx, "/datapb.Data/Append", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Replicate(ctx context.Context, opts ...grpc.CallOption) (Data_ReplicateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Data_serviceDesc.Streams[0], c.cc, "/datapb.Data/Replicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataReplicateClient{stream}
	return x, nil
}

type Data_ReplicateClient interface {
	Send(*ReplicateRequest) error
	CloseAndRecv() (*ReplicateResponse, error)
	grpc.ClientStream
}

type dataReplicateClient struct {
	grpc.ClientStream
}

func (x *dataReplicateClient) Send(m *ReplicateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataReplicateClient) CloseAndRecv() (*ReplicateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplicateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Data_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Data_serviceDesc.Streams[1], c.cc, "/datapb.Data/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Data_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type dataSubscribeClient struct {
	grpc.ClientStream
}

func (x *dataSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) Trim(ctx context.Context, in *TrimRequest, opts ...grpc.CallOption) (*TrimResponse, error) {
	out := new(TrimResponse)
	err := grpc.Invoke(ctx, "/datapb.Data/Trim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/datapb.Data/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Data service

type DataServer interface {
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	Replicate(Data_ReplicateServer) error
	Subscribe(*SubscribeRequest, Data_SubscribeServer) error
	Trim(context.Context, *TrimRequest) (*TrimResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapb.Data/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Replicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).Replicate(&dataReplicateServer{stream})
}

type Data_ReplicateServer interface {
	SendAndClose(*ReplicateResponse) error
	Recv() (*ReplicateRequest, error)
	grpc.ServerStream
}

type dataReplicateServer struct {
	grpc.ServerStream
}

func (x *dataReplicateServer) SendAndClose(m *ReplicateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataReplicateServer) Recv() (*ReplicateRequest, error) {
	m := new(ReplicateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Data_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).Subscribe(m, &dataSubscribeServer{stream})
}

type Data_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type dataSubscribeServer struct {
	grpc.ServerStream
}

func (x *dataSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Data_Trim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Trim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapb.Data/Trim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Trim(ctx, req.(*TrimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapb.Data/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datapb.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _Data_Append_Handler,
		},
		{
			MethodName: "Trim",
			Handler:    _Data_Trim_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Data_Read_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Replicate",
			Handler:       _Data_Replicate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Data_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "datapb/data.proto",
}

func init() { proto.RegisterFile("datapb/data.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0x5f, 0x4f, 0xf2, 0x30,
	0x14, 0xc6, 0xe9, 0x80, 0xe5, 0xe5, 0xbc, 0xa8, 0xa3, 0x28, 0x99, 0xbb, 0x91, 0xf4, 0xc2, 0xe0,
	0x0d, 0x1a, 0xb9, 0xf2, 0x42, 0x13, 0x93, 0x45, 0x43, 0xf4, 0x6a, 0xea, 0xb5, 0xd9, 0x9f, 0x86,
	0x2c, 0xd1, 0x6d, 0xb6, 0x03, 0x3f, 0x9a, 0x5f, 0xcf, 0x8c, 0xb6, 0x6b, 0x37, 0xe1, 0x0a, 0xfa,
	0x70, 0xce, 0xaf, 0xcf, 0x39, 0x4f, 0x81, 0x51, 0x12, 0x96, 0x61, 0x11, 0x5d, 0x56, 0x1f, 0xf3,
	0x82, 0xe5, 0x65, 0x8e, 0x6d, 0x21, 0x91, 0x27, 0x38, 0xb8, 0x2f, 0x0a, 0x9a, 0x25, 0x01, 0xfd,
	0x5a, 0x53, 0x5e, 0x62, 0x07, 0xba, 0x71, 0x9a, 0xb8, 0x68, 0x8a, 0x66, 0xfd, 0xa0, 0xfa, 0xba,
	0x55, 0x78, 0xe6, 0x5a, 0x52, 0xe1, 0x19, 0x9e, 0x80, 0xcd, 0x68, 0x9c, 0xb3, 0xc4, 0xed, 0x4e,
	0xd1, 0x6c, 0x10, 0xc8, 0x13, 0x79, 0x86, 0x43, 0x05, 0xe3, 0x45, 0x9e, 0x71, 0xaa, 0x7a, 0x91,
	0xee, 0x75, 0xa0, 0xbb, 0xd2, 0xb4, 0x95, 0xa0, 0x6d, 0x52, 0xfa, 0xbd, 0xf4, 0xb7, 0xb4, 0x7e,
	0x20, 0x4f, 0xe4, 0x01, 0x9c, 0x80, 0x16, 0x1f, 0x69, 0x1c, 0x96, 0x54, 0xb9, 0xf3, 0xe0, 0x1f,
	0xa7, 0x6c, 0x43, 0xd9, 0xd2, 0x97, 0xd0, 0xfa, 0x6c, 0xb8, 0xb2, 0x1a, 0xae, 0xc6, 0x30, 0x32,
	0x38, 0xc2, 0x18, 0xb9, 0x05, 0xe7, 0x65, 0x1d, 0xf1, 0x98, 0xa5, 0x51, 0x0d, 0xbf, 0x00, 0x87,
	0x0b, 0xad, 0x28, 0xd3, 0x3c, 0x7b, 0x5f, 0xd5, 0xce, 0x8f, 0x4c, 0xfd, 0x91, 0x67, 0xe4, 0x0d,
	0x46, 0x46, 0xbb, 0x1e, 0x56, 0xb7, 0xa8, 0xd1, 0x76, 0x59, 0xda, 0x3b, 0xf2, 0x19, 0xfc, 0x7f,
	0x65, 0xe9, 0xa7, 0x91, 0x45, 0x13, 0x48, 0xce, 0x61, 0x28, 0x0a, 0xe4, 0x95, 0x1a, 0x84, 0xda,
	0xa0, 0x80, 0x86, 0xc9, 0x7e, 0xd0, 0x1d, 0x0c, 0x45, 0x81, 0x06, 0x49, 0xa7, 0x68, 0x8f, 0x53,
	0xcb, 0xbc, 0xe0, 0xfa, 0xc7, 0x82, 0x9e, 0x1f, 0x96, 0x21, 0xbe, 0x01, 0x5b, 0x64, 0x8e, 0x4f,
	0xe6, 0xe2, 0x4d, 0xcd, 0x1b, 0x0f, 0xca, 0x9b, 0xb4, 0x65, 0x99, 0x40, 0x07, 0xfb, 0x30, 0xa8,
	0x83, 0xc1, 0xae, 0x2a, 0x6b, 0x67, 0xee, 0x9d, 0xee, 0xf8, 0x45, 0x31, 0x66, 0xa8, 0xa2, 0xd4,
	0x51, 0x68, 0x4a, 0x3b, 0x5c, 0x4d, 0xf9, 0x93, 0x1b, 0xe9, 0x5c, 0x21, 0xbc, 0x80, 0x5e, 0xb5,
	0x58, 0x3c, 0x56, 0x65, 0x46, 0x0e, 0xde, 0x71, 0x53, 0xac, 0x07, 0x58, 0x40, 0xaf, 0x5a, 0xa2,
	0x6e, 0x32, 0x76, 0xae, 0x9b, 0xcc, 0x3d, 0x93, 0x4e, 0x64, 0x6f, 0xff, 0x80, 0x8b, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x3c, 0x03, 0x6e, 0x33, 0x95, 0x03, 0x00, 0x00,
}
